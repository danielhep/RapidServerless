# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: RapidPlanning # NOTE: update this with your service name
app: RapidWebAPI
# tenant: ScheduleAPI

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  environment: 
    MONGO_URI: mongodb+srv://readonly:1sv5GULN0Fp5WXd5@cluster0-dguyv.azure.mongodb.net/gtfs?retryWrites=true&w=majority

package:
 include:
   - src/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  getStops:
    handler: handler.getStops
    events:
      - http:
          path: stops
          method: get
          cors:
            origin: '*'
            headers:
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
  getRoutes:
    handler: handler.getRoutes
    events:
      - http:
          path: routes
          method: get
          cors:
            origin: '*'
            headers:
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
  getScheduleByStop:
    handler: handler.getScheduleByStop
    events:
      - http:
          path: schedule
          method: get
          cors:
            origin: '*'
            headers:
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
